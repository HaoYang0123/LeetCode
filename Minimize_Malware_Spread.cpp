//Leetcode 924
//宽度搜索，找到图中的子图

class Solution {
public:
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        int n=graph.size();
        unordered_map<int, bool> mm;
        for(int i=0;i<initial.size();++i) {
            mm[initial[i]] = true;
            //cout<<"INI\t"<<initial[i]<<endl;
        }
        for(int i=0;i<n;++i) {
            if(mm.find(i)==mm.end()) continue;
            vector<int> is_vis(n,0);
            is_vis[i]=1;
            queue<int> qs;
            qs.push(i);
            while(!qs.empty()) {
                int c=qs.front();
                qs.pop();
                for(int j=0;j<n;++j) {
                    if(graph[c][j]==0) continue;
                    if(is_vis[j]!=0) continue;
                    is_vis[j]=1;
                    qs.push(j);
                    graph[i][j]=1;
                }
            }
        }
        /*
        for(int i=0;i<n;++i) {
            cout<<i<<"\t:";
            for(int j=0;j<n;++j) {
                cout<<"\t"<<graph[i][j];
            }
            cout<<endl;
        }
        */
        
        //for(auto ind=mm.begin();ind!=mm.end();++ind) cout<<ind->first<<"\t"<<ind->second<<endl;
        int max_v = 0, res = -1, min_index=n;
        for(int i=0;i<initial.size();++i) {
            int ini=initial[i];
            if(ini<min_index) {
                min_index=ini;
            }
            vector<int> & cc = graph[ini];
            int cc_size=0, com_size=0;
            for(int j=0;j<cc.size();++j) {
                if(cc[j] == 1) {
                    ++cc_size;
                    if(mm.find(j) != mm.end()) ++com_size;
                }
            }
            //cout<<ini<<"\t"<<cc_size<<"\t"<<com_size<<endl;
            if(com_size>1) com_size=0;
            else {
                if(cc_size>max_v) {
                    max_v=cc_size;
                    res = ini;
                }
                else if(cc_size==max_v) {
                    res = min(res, ini);
                }
            }
        }
        if(res != -1) return res;
        return min_index;
    }
};
